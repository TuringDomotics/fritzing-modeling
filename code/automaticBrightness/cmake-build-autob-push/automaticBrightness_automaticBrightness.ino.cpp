// automatically generated by arduino-cmake
#line 1 "E:/Nextcloud/TuringDomotics/fritzing-modeling/code/automaticBrightness/automaticBrightness.ino"
#include <Arduino.h>
#include <LiquidCrystal.h>

#line 6 "E:/Nextcloud/TuringDomotics/fritzing-modeling/code/automaticBrightness/cmake-build-autob-push/automaticBrightness_automaticBrightness.ino.cpp"
#include "Arduino.h"

//=== START Forward: E:/Nextcloud/TuringDomotics/fritzing-modeling/code/automaticBrightness/automaticBrightness.ino
 void setup() ;
 void setup() ;
 void loop() ;
 void loop() ;
 void ledOutput() ;
 void ledOutput() ;
 void screenOutput() ;
 void screenOutput() ;
//=== END Forward: E:/Nextcloud/TuringDomotics/fritzing-modeling/code/automaticBrightness/automaticBrightness.ino
#line 2 "E:/Nextcloud/TuringDomotics/fritzing-modeling/code/automaticBrightness/automaticBrightness.ino"


LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

int pinLED = 8;
int pinLDR = A0;
int pinControl = 13;

int brightness = 255;
int LDRValue = 0;
int control = 0;

void ledOutput();
void screenOutput();

void setup() {
    lcd.begin(16, 2);
    pinMode(pinLED, OUTPUT);
    pinMode(pinControl, INPUT);
}

void loop() {
    int status = digitalRead(pinControl);
    if (status == HIGH) {
        control = (control + 1) % 3;
    }
    ledOutput();
    screenOutput();
    delay(200);
}

void ledOutput() {
    switch (control) {
        case 0:
            LDRValue = analogRead(pinLDR);
            if (LDRValue <= 75) {
                int newBrightness = brightness - LDRValue - 100;
                analogWrite(pinLED, newBrightness);
            } else {
                digitalWrite(pinLED, LOW);
            }
            break;
        case 1:
            digitalWrite(pinLED, HIGH);
            break;
        case 2:
            digitalWrite(pinLED, LOW);
            break;
        default:
            break;
    }
}

void screenOutput() {
    lcd.setCursor(0, 0);
    switch (control) {
        case 0:
            lcd.print("Auto. mode");
            break;
        case 1:
            lcd.print("Always on");
            break;
        case 2:
            lcd.print("Always off");
            break;
        default:
            break;
    }
}